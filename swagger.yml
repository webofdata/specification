swagger: "2.0"
info:
  description: "The protocol specification for a web of data node. The [https://webofdata.org/specification.html](Specification) defines a data model, serialisation format and protocol for managing and sharing data at web scale."
  version: "1.0.0"
  title: "Web Of Data - Protocol"
tags:
- name: "Management"
- name: "Synchronisation"
- name: "Query"
schemes:
- "https"
paths:

  /info:
    get:
      tags:
        - "Management"
      summary: "Returns information about this service instance"
      description: "Returns information about this service instance, including an entity which conveys on this service instance a unique identifier"
      operationId: "get-service-info"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceInfo"

  /stores:
    get:
      tags:
        - "Management"
      summary: Returns a list of stores
      description: "returns a list of stores"
      operationId: "get-stores"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "query"
          description: "if present tries to find the store with that id (note: not the store name)"
          required: false
          type: string
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Store"

    post:
      tags:
        - "Management"
      summary: Create a new store
      description: "Creates a new store with the name provided if and only if this name is not already in use. If no name is provided then the server MUST generate one"
      operationId: "create-store"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Store to create"
          required: true
          schema:
            $ref: "#/definitions/Store"
      responses:
        201:
          description: "successful operation - store created"
          schema:
            $ref: "#/definitions/Entity"
        400:
          description: "Occurs when the store passed in the body is invalid or missing"

  /stores/{store-name}:
    get:
      tags:
        - "Management"
      summary: get store by its local store name
      description: returns a single store object or 404 not found
      operationId: get-store
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        404:
          description: "store not found"

    delete:
      tags:
        - "Management"
      summary: delete the named store, and all datasets
      description: deletes the named store or returns a 404 not found if no store of the name provided exists
      operationId: delete-store
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
        404:
          description: "store not found"

    put:
      tags:
        - "Management"
      summary: updates the store entity
      description: updates the entity that represents the store
      operationId: update-store
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "New representation of the store entity"
          required: true
          schema:
            $ref: "#/definitions/Entity"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        404:
          description: "store not found"

  /stores/{store-name}/query:
    get:
      tags:
        - "Query"
      summary: queries across the datasets of the store using the query parameters provided.
      operationId: query-store
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
        - name: "subject"
          in: "query"
          required: false
          type: "string"
      responses:
        200:
          description: "succesful operation"

  /stores/{store-name}/transactions:
    post:
      tags:
        - "Management"
      summary: Atomically updates entities across one or more datasets.
      operationId: create-transaction
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Transaction data"
          required: true
          schema:
            $ref: "#/definitions/Transaction"
      responses:
        200:
          description: "succesful operation"

    get:
      tags:
        - "Management"
      summary: returns a list of transactions
      operationId: get-transactions
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
        - name: "status"
          in: "query"
          description: "one of running, queued, completed"
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TransactionInfo"

  /stores/{store-name}/datasets:
    get:
      tags:
        - "Management"
      summary: "gets a list of datasets in the named store"
      description: "returns a single store object or 404 if the store does not exist"
      operationId: "get-datasets"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dataset"
        404:
          description: "Store not found"

    post:
      tags:
        - "Management"
      summary: Create a new dataset
      description: "Creates a new dataset with the name provided if and only if this name is not already taken in this named store. If no name is provided the server MUST generate one."
      operationId: "create-dataset"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Dataset to create"
          required: true
          schema:
            $ref: "#/definitions/Dataset"
      responses:
        201:
          description: "successful operation - dataset created"
          schema:
            $ref: "#/definitions/Dataset"
        404:
          description: "Store not found"
        400:
          description: "Occurs when the dataset passed in the body is invalid or missing"

  /stores/{store-name}/datasets/{dataset-name}:
    get:
      tags:
        - "Management"
      summary: "Gets the datasets in the named store"
      description: "Returns a list of dataset objects or 404 if the store does not exist"
      operationId: "get-dataset"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "dataset-name"
          in: "path"
          description: "dataset name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Dataset"
        404:
          description: "Invalid store name or dataset name"

    put:
      tags:
        - "Management"
      summary: Update dataset
      description: "Update the entity for the dataset"
      operationId: "update-dataset"
      produces:
        - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "New dataset entity data"
        required: true
        schema:
          $ref: "#/definitions/Entity"
      responses:
        200:
          description: "successful operation - dataset updated"
          schema:
            $ref: "#/definitions/Dataset"
        400:
          description: "Occurs when the dataset passed in the body is invalid or missing"
        404:
          description: "Store or dataset not found"

    delete:
      tags:
        - "Management"
      summary: Delete dataset
      description: "Delete the dataset"
      operationId: "delete-dataset"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation - dataset deleted"
        404:
          description: "Store or dataset not found"

  /stores/{store-name}/datasets/{dataset-name}/entities/partitions:
    get:
      tags:
        - "Management"
      summary: "Get partitions for reading the dataset in parallel"
      description: "Returns a list of tokens to be used with the x-wod-next-data query parameter of the get-entities operation."
      operationId: "get-partitions"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "partitions"
        in: "query"
        type: "string"
        description: "If provided it indicates to the server the desired number of partitions. The server is free to decide the partition count."
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"

  /stores/{store-name}/datasets/{dataset-name}/merge-operations:
    get:
      tags:
        - "Management"
      summary: "Gets list of merge operations."
      description: "Gets a list of merge operations including any that is currently running. MUST return the most recent completed or currently executing and MAY return a longer history."
      operationId: "get-merge-operations"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MergeOperation"

    post:
      tags:
        - "Management"
      summary: "Creates operation that will merge in the named dataset."
      description: "Creates an operation that adds or updates all the entities in this dataset from those in the specified dataset."
      operationId: "create-merge-operation"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "merge-operation"
        in: "body"
        schema:
          $ref: "#/definitions/MergeOperation"
      responses:
        201:
          description: "Merge operation created"
        400:
          description: "Referenced dataset does not exist"
        404:
          description: "Store or dataset not found"
        501:
          description: "Merge is not supported on this dataset"


  /stores/{store-name}/datasets/{dataset-name}/entities:
    get:
      tags:
        - "Management"
      summary: "Get entities in the dataset"
      description: "Returns the entities in the specified dataset. Can also be used to locate a specific entity using the id query parameter."
      operationId: "get-entities"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "dataset-name"
          in: "path"
          description: "dataset name"
          required: true
          type: "string"
        - name: "id"
          in: "query"
          type: "string"
          description: "If provided it must be a full uri and it will limit the number of entities to either 0 or 1, depending if an entity with that id exists in the dataset"
        - name: "nextdata"
          in: "query"
          type: "string"
          description: "A token used to retrieve more data. Tokens are provided as a result of calling get-entities-partitions or as a value in the X-WOD-NEXT-DATA response header."
      responses:
        200:
          description: "successful operation"
          headers:
            x-wod-next-data:
              description: "if present indicates to the client that there is more data to be retreived. Use the value of this header as the value of the 'nextdata' query parameter to retreive more data."
              type: "string"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"
        404:
          description: "Store or dataset not found"

    delete:
      tags:
        - "Management"
      summary: "Delete all entities in the dataset"
      description: "Deletes all entities in the dataset but not the dataset itself"
      operationId: "delete-entities"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "dataset-name"
          in: "path"
          description: "dataset name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"

    post:
      tags:
        - "Management"
      summary: "Add, replaces or deletes entities in the dataset"
      description: "Adds, replaces or deletes all the entities in the specified dataset with those provided in the body."
      operationId: "store-entities"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "entities"
        in: "body"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Entity"
      responses:
        200:
          description: "successful operation"

  /stores/{store-name}/datasets/{dataset-id}/changes:
    get:
      tags:
        - "Synchronisation"
      summary: "Get dataset changes"
      description: "Returns all the changes in the specified dataset. Use of the since parameter restricts the set of values returned."
      operationId: "get-changes"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          type: "string"
          required: true
        - name: "dataset-id"
          in: "path"
          type: "string"
          required: true
        - name: "since"
          in: "query"
          description: "A token that the service interprets in order to only return changes that have occurred since that point."
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            x-wod-full-sync:
              description: if present indicates that a full sync is required. This means that all local data should be deleted and the new data arriving put in its place.
              type: string
            x-wod-next-page:
              description: if present indicates to the client that there is more data to be retreived
              type: string
            x-wod-next-request:
              description: if present it is the url that should be used the next time the client wishes to retrieve changes.
              type: string
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"
        400:
          description: "Invalid since token"


definitions:

  ServiceInfo:
    type: "object"
    properties:
      "name":
        "type": "string"
      "baseurl":
        "type": "string"
      "entity":
        "$ref": "#/definitions/Entity"

  Store:
    type: "object"
    properties:
      "name":
        "type": "string"
      "entity":
        "$ref": "#/definitions/Entity"

  Dataset:
    type: "object"
    properties:
      "name":
        "type": "string"
      "entity":
        "$ref": "#/definitions/Entity"

  Entity:
    type: "object"
    properties:
      "@id":
        type: "string"
      "@deleted":
        type: "boolean"
        default: false
      "@context":
        "$ref": "#/definitions/Context"
      "@etag":
        type: "string"

  Context:
    type: "object"
    properties:
      namespaces:
        type: "object"
      datatypes:
        type: "object"

  Transaction:
    type: "object"
    properties:
      id:
        type: "string"
      operations:
        type: "array"
        items:
          $ref: "#/definitions/TransactionOperation"

  TransactionOperation:
    type: "object"
    properties:
      dataset:
        type: "string"
        description: "The name of the dataset to update entities in"
      body:
        type: array
        items:
          $ref: "#/definitions/Entity"

  TransactionInfo:
    type: "object"
    properties:
      id:
        type: "string"
      status:
        type: "string"

  MergeOperation:
    type: "object"
    properties:
      id:
        type: "string"
      dataset:
        type: "string"
      status:
        type: "string"
